#include "main.fx"

float4x4 g_mWorld : World;        
float4x4 g_mWorldView;
texture  g_txCubeMap : TextureCubeMap;
float    g_fReflectivity = 0.09f; // доля отражаемого

float roughness_val = 0.3;
//-----------------------------------------------------------------------------
samplerCUBE g_samCubeMap = 
sampler_state
{
    Texture = <g_txCubeMap>;
    MinFilter = Linear;
    MagFilter = Linear;
    MipFilter = Linear;
};
//-----------------------------------------------------------------------------
/*
								 V	  N    L
									\		|   /
									 \  |  /
										\ |	/	
_____________________\|/_______________________
*/
float CalcCookTorrens(float3 Pos, float3 N, float3 vCameraPos, float3 vLightPos)
{
	float res = 1.0f;
	//вектора относительно позиции точки
	float3 L = normalize(vLightPos-Pos);
	float3 V = normalize(vCameraPos-Pos);
	float3 H = normalize(L+V);
	//-----------------------------------
	// скалярные произведения
	float dVN = max(dot(V,N),0.0f);
	float dLN = max(dot(L,N),0.0f);
	float dHN = max(dot(H,N),1.0e-7);
	float dVH = max(dot(V,H),0.0f);	
	// коэф Френеля
	float F = 1/(1+dVN);
	
	//геометрический фактор
   float geometric = 2.0 * dHN / dVH;
         geometric = min( 1.0, geometric * min(dVN, dLN) );	 
				 
	// Френель
	float r_sq          = roughness_val * roughness_val;
	float NdotH_sq      = dHN * dHN;
	float NdotH_sq_r    = 1.0 / (NdotH_sq * r_sq);
	float roughness_exp = (NdotH_sq - 1.0) * ( NdotH_sq_r );
	float roughness     = exp(roughness_exp) * NdotH_sq_r / (4.0 * NdotH_sq );				 
				 
	//распределение Бекмана
	res = min(1.0f,(F * geometric * roughness)/(dVN*dLN+1.0e-7));
	return res;
}
//-----------------------------------------------------------------------------
void mainVS( float4 Pos : POSITION,
             float3 Normal : NORMAL,
             float2 vTexCoordIn: TEXCOORD0,
             out float4 oPos : POSITION,
             out float2 vTexCoordOut: TEXCOORD0,
             out float3 EnvTex : TEXCOORD1,
             out float4 vColorOut: COLOR0)
{
	float4x4 mWorldView = mul(g_mWorld,g_mView);
  oPos = mul( Pos, mWorldView);

  // Compute normal in camera space
  float3 vN = mul( Normal, mWorldView);
  vN = normalize( vN );
  // Obtain the reverse eye vector
  float3 vEyeR = -normalize( oPos );
  // Compute the reflection vector
  float3 vRef = 2 * dot( vEyeR, vN ) * vN - vEyeR;
  // Store the reflection vector in texcoord0
  EnvTex = vRef;
  // Apply the projection
  oPos = mul( oPos, g_mProj );
	//-----------------------------------------------------------------
	
	float4x4 mWorldViewProjection = mul(mul(g_mWorld,g_mView),g_mProj);
	// Transform the position into world space for lighting, and projected space
	// for display
	float4 vPosWorld = mul( Pos, g_mWorld );
	//vPosProj = mul( Pos, mWorldViewProjection );
	
	// Transform the normal into world space for lighting
	float3 vNormalWorld = mul( Normal, (float3x3)g_mWorld );
	
  vColorOut = float4(0,0,0,1);
  for(int i = 0 ; i < MAX_NUM_LIGHTS ; i++)
	{
    if(g_vLightColor[i].r>0.0f)
    if(g_vLightColor[i].g>0.0f)
    if(g_vLightColor[i].b>0.0f)
		{
			float Rs = CalcCookTorrens(vPosWorld.xyz,Normal,g_vCameraPosition,g_vLightPosition[i]);
			float3 L = normalize(g_vLightPosition[i]-vPosWorld.xyz);
			float LdotN = dot(L,Normal);
			vColorOut.rgb += g_vLightColor[i]*(g_vMaterialAmbient + LdotN*(g_vMaterialDiffuse + g_vMaterialSpecular*Rs));
		}
	}
	vColorOut.a = 1.0f;
	//------------------------------------------------------------------------------
	vTexCoordOut = vTexCoordIn;
}
//-----------------------------------------------------------------------------
#define LIMIT_COLOR_FOR_REFLECT 0.85f
#define COEF_COLOR_FOR_REFLECT  2.50f
float4 mainPS( float2 vTexCoord: TEXCOORD0,
               float4 vColorIn : COLOR0,
				       float3 Tex      : TEXCOORD1 ): COLOR	 
{
#if 0
	// выделить источник освещения
  float4 colorMirror = texCUBE( g_samCubeMap, Tex );
  if((colorMirror.r>LIMIT_COLOR_FOR_REFLECT)&&
     (colorMirror.g>LIMIT_COLOR_FOR_REFLECT)&&
	   (colorMirror.b>LIMIT_COLOR_FOR_REFLECT))
  {
    colorMirror = COEF_COLOR_FOR_REFLECT * g_fReflectivity * texCUBE( g_samCubeMap, Tex );	
		colorMirror.rgb = saturate(colorMirror.rgb);
  }
  else
    colorMirror = g_fReflectivity * texCUBE( g_samCubeMap, Tex );
#else
  float4 colorMirror = g_fReflectivity * texCUBE( g_samCubeMap, Tex );
#endif  
  
	float4 vColorOut = vColorIn;

	vColorOut   *= tex2D( MeshTextureSampler, vTexCoord );  
	vColorOut.a  = 1.0f;  
	vColorOut.a *= g_fMaterialAlpha;
	
	vColorOut += colorMirror;
	return vColorOut;
}
//-----------------------------------------------------------------------------
technique Render
{
    pass p0
    {
        VertexShader = compile vs_2_0 mainVS();
        PixelShader = compile ps_2_0  mainPS();
    }
}
//-----------------------------------------------------------------------------